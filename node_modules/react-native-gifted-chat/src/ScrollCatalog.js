import React, {
  Component
} from 'react';
import ReactNative, {
  Text,
  ListView,
  TouchableOpacity,
  View,
  SafeAreaView,
  Image,
  Platform,
  ScrollView,
  StatusBar,
} from 'react-native';
import PropTypes from 'prop-types';
import Carousel, { Pagination } from 'react-native-snap-carousel';
import { sliderWidth, itemWidth } from './styles/SliderEntry.style';
import SliderEntry from './components/SliderEntry';
import styles, { colors } from './styles/index.style';
import { ENTRIES1, ENTRIES2 } from './static/entries';
import { scrollInterpolators, animatedStyles } from './utils/animations';

class ScrollCatalog extends Component {
  	_onPress(data) {
      	this.props.onPress(data);
  	}

	_renderItem ({item, index}) {
	    return <SliderEntry data={item} even={(index + 1) % 2 === 0} />;
	}

    _renderItemWithParallax ({item, index}, parallaxProps) {
        return (
            <SliderEntry
              data={item}
              even={(index + 1) % 2 === 0}
              parallax={true}
              parallaxProps={parallaxProps}
            />
        );
    }

    mainExample (number, entries) {
        const { slider1ActiveSlide } = this.props.slider1ActiveSlide;

        return (
            <View style={styles.exampleContainer}>
                <Carousel
                  ref={c => this._slider1Ref = c}
                  data={entries}
                  renderItem={this._renderItemWithParallax}
                  sliderWidth={sliderWidth}
                  itemWidth={itemWidth}
                  hasParallaxImages={true}
                  firstItem={0}
                  inactiveSlideScale={0.94}
                  inactiveSlideOpacity={0.7}
                  // inactiveSlideShift={20}
                  containerCustomStyle={styles.slider}
                  contentContainerCustomStyle={styles.sliderContentContainer}
                  loop={false}
                  loopClonesPerSide={2}
                  autoplay={false}
                  onSnapToItem={(index) => this.setState({ slider1ActiveSlide: index }) }
                />
            </View>
        );
    }


    render () {
    if (this.props.isCatalog === true) {
        const example1 = this.mainExample(0, this.props.entries);

        return (
            <SafeAreaView style={styles.safeArea}>
                <View style={styles.container}>
                    <StatusBar
                      translucent={true}
                      backgroundColor={'rgba(0, 0, 0, 0.3)'}
                      barStyle={'light-content'}
                    />
                    <ScrollView
                      style={styles.scrollview}
                      scrollEventThrottle={200}
                      directionalLockEnabled={true}
                    >
                        { example1 }
                    </ScrollView>
                </View>
            </SafeAreaView>
        );
    }
    return null;
	}
}


ScrollCatalog.propTypes = {
  entries: PropTypes.array.isRequired,
  slider1ActiveSlide: PropTypes.number.isRequired,
  onPress: PropTypes.func.isRequired,
  isCatalog: PropTypes.bool,
  onCatalog: PropTypes.func,
}

ScrollCatalog.defaultProps = {
  slider1ActiveSlide: 0,
  isCatalog: false,
}

module.exports = ScrollCatalog;
